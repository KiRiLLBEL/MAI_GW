name: CMake build + auto tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        preset: [debug, sanitazers, release]

        include:
          - os: ubuntu-latest
            preset: debug
          - os: ubuntu-latest
            preset: sanitazers
          - os: ubuntu-latest
            preset: release

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang cmake
        shell: bash

      - name: Set version
        id: set_version
        run: |
          echo "VERSION=v${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Configure
        working-directory: language
        run: cmake --preset ${{ matrix.preset }}

      - name: Build
        working-directory: language
        run: cmake --build --preset ${{ matrix.preset }}

      - name: Test
        working-directory: language
        if: matrix.preset != 'release'
        run: ctest --preset ${{ matrix.preset }} --output-on-failure

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Arch-latest-${{ matrix.preset }}
          path: language/build

  test-dsl:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: Arch-latest-debug
          path: artifacts

      - name: Show downloaded files
        run: ls -R artifacts

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install -r converter/requirements.txt

      - name: Start Neo4j Docker Container
        run: |
          docker pull neo4j:latest
          docker run -d \
            --name neo4j-test \
            --publish=7474:7474 --publish=7687:7687 \
            --volume=$HOME/neo4j/data:/data \
            --env=NEO4J_AUTH=none \
            -e NEO4J_apoc_export_file_enabled=true \
            -e NEO4J_apoc_import_file_enabled=true \
            -e NEO4J_apoc_import_file_use__neo4j__config=true \
            -e NEO4J_PLUGINS='["apoc", "graph-data-science"]' \
            neo4j:latest

      - name: Wait for Neo4j to be ready
        run: sleep 20

      - name: Run All Tests
        run: ./scripts/test-runner.sh

      - name: Stop Neo4j container
        if: always()
        run: docker stop neo4j-test
